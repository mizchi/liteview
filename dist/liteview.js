// Generated by CoffeeScript 0.8.1
void function () {
  var LiteView, ValueObject;
  ValueObject = function () {
    ValueObject.prototype.css = function () {
      return this.$el.css.apply(this.$el, [].slice.call(arguments));
    };
    ValueObject.prototype.selectorCss = function (selector, args) {
      var cache$;
      args = 2 <= arguments.length ? [].slice.call(arguments, 1) : [];
      return (cache$ = this.$(selector)).css.apply(cache$, [].slice.call(args));
    };
    function ValueObject(opts) {
      this.$el = null != opts.$el ? opts.$el : $el($('<div>'));
    }
    ValueObject.prototype.$ = function (selector) {
      return this.$el.find(selector);
    };
    ValueObject.prototype.show = function () {
      return this.$el.show();
    };
    ValueObject.prototype.observe = function (first, second, third) {
      var callback, key, model;
      if (typeof third === 'function') {
        model = first;
        key = first;
        callback = third;
      } else if (null != this.model) {
        model = this.model;
        key = first;
        callback = second;
      } else {
        throw 'invalid observe target';
      }
      return model.on('change:' + key, callback);
    };
    ValueObject.prototype.hide = function () {
      return this.$el.hide();
    };
    ValueObject.prototype.remove = function () {
      return this.$el.remove();
    };
    ValueObject.prototype.on = function () {
      return this.$el.on.apply(this.$el, [].slice.call(arguments));
    };
    ValueObject.prototype.off = function () {
      return this.$el.off.apply(this.$el, [].slice.call(arguments));
    };
    ValueObject.prototype.html = function () {
      return this.$el.html.apply(this.$el, [].slice.call(arguments));
    };
    ValueObject.prototype.text = function () {
      return this.$el.text.apply(this.$el, [].slice.call(arguments));
    };
    ValueObject.prototype.cssProperty = function (key, propertyName) {
      if (null != propertyName)
        propertyName;
      else
        propertyName = key;
      return Object.defineProperty(this, key, {
        get: function () {
          return this.css(propertyName);
        },
        set: function (v) {
          return this.css(propertyName, v);
        }
      });
    };
    return ValueObject;
  }();
  LiteView = function (super$) {
    extends$(LiteView, super$);
    LiteView.prototype.template = function () {
    };
    function LiteView(opts) {
      ValueObject.constructor.apply(this, arguments);
      this._dom_cache = {};
      this.$el = null != (null != opts ? opts.$el : void 0) ? null != opts ? opts.$el : void 0 : $('<div>');
      this.render();
    }
    LiteView.prototype.render = function () {
      if (this.template)
        return this.$el.html(this.template);
    };
    LiteView.prototype.attach = function (selector, container) {
      if (null == container)
        container = null;
      if (arguments.length === 1 && selector instanceof LiteView) {
        return selector.$el.append(this.$el);
      } else if (container instanceof LiteView) {
        return container.$(selector).append(this.$el);
      } else {
        return $(selector).append(this.$el);
      }
    };
    LiteView.prototype.detach = function () {
      return this.$el.detach();
    };
    LiteView.prototype.domProperty = function (key, selector) {
      var el;
      el = this.$(selector);
      if (el.length > 0)
        this._dom_cache[key] = new ValueObject({ $el: el });
      return Object.defineProperty(this, key, {
        get: function () {
          if (null != this._dom_cache[key]) {
            return this._dom_cache[key];
          } else {
            el = this.$(selector);
            if (el.length > 0) {
              return this._dom_cache[key] = new ValueObject({ $el: el });
            } else {
              return null;
            }
          }
        },
        set: function (v) {
          if (v instanceof jQuery) {
            return this._dom_cache[key] = new ValueObject({ $el: v });
          } else if (v instanceof HTMLElement) {
            return this._dom_cache[key] = new ValueObject({ $el: $(v) });
          } else {
            throw 'invalid value as DOM element';
          }
        }
      });
    };
    return LiteView;
  }(ValueObject);
  window.LiteView = LiteView;
  function isOwn$(o, p) {
    return {}.hasOwnProperty.call(o, p);
  }
  function extends$(child, parent) {
    for (var key in parent)
      if (isOwn$(parent, key))
        child[key] = parent[key];
    function ctor() {
      this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor;
    child.__super__ = parent.prototype;
    return child;
  }
}.call(this);
